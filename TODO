unittest all the things
rename moveAble
octree for voxel image
kdtree for 2d or generic
quadtree
convex hull https://github.com/I3ck/lib_2d/blob/master/inc/PointCloud.h#L401

more filter shapes

mark functions and traits as tested/untested?

transformers as wrappers / intermediate structures

add more combinator filters to the random accessible filters

type for face to be able to define e.g. filters for them

replace Option returns with Result

new or build nameming convention?

enable warnings as errors for tests (currently many warnings for unused imports etc)

trait for type with one or many normals (normal() or normal(id))

the filter code is now very generic, consider moving it into its own crate

has_position trait which then can implement many other traits by using the provided position (similar for others) => Use AsMut or AsRef for these

add algorithms folder for algorithms

make the tests folder of the exact same structure and file names as src,
this way it becomes very easy to ensure everything is tested

many tests are missing

update tests

change other filter tests to use files as well
also write tests for the combinator filters

make kd-tree n-dimensional   (maybe the octree as well, but might be easier to implement quadtree)

make trees referencing via ids

filters should be directed (this could be dropped and a TransFormed wrapper applied [which inverse transformes incoming points first])

for impls and structs only require as few traits as possible

IO methods split from the impls / traits as algorithms on them

some structs / traits have 2d/3d specification even if they can only exist in one of the spaces. e.g. filter_circle can't have a 3d version, rename accordingly

write tutorial / examples / example program

try to avoid dynamic traits

outlier removal (filter which holds a kdtree of the reference structure, calc median / medium distance to k-nearest
neighbours remove which are further than x, furthest x percent further than x times
median / average dist...   could take either kdtree or iterator or random access
and be destructible to kdtree)

segmantation detection

either many more filters or factories for filters (same for shapes)

IO methods for PC and mesh for all general file formats

octree is missing many query methods
(also implement quad tree once these are implemented)

new filter type for directions/normals or positions & normals
