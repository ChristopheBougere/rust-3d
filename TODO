unittest all the things
rename moveAble
octree for voxel image
kdtree for 2d or generic
quadtree
convex hull https://github.com/I3ck/lib_2d/blob/master/inc/PointCloud.h#L401

more filter shapes

transformers as wrappers / intermediate structures

add more combinator filters to the random accessible filters

either keep the README up to date or refer to the docs only

the filter code is now very generic, consider moving it into its own crate

has_position trait which then can implement many other traits by using the provided position (similar for others) => Use AsMut or AsRef for these

add algorithms folder for algorithms

make the tests folder of the exact same structure and file names as src,
this way it becomes very easy to ensure everything is tested

many tests are missing

update README and tests

change other filter tests to use files as well
also write tests for the combinator filters

move combinator filters to own folder?

make kd-tree n-dimensional   (maybe the octree as well, but might be easier to implement quadtree)

make trees referencing via ids

filters should be directed (this could be dropped and a TransFormed wrapper applied [which inverse transformes incoming points first])

for impls and structs only require as few traits as possible

IO methods split from the impls / traits as algorithms on them

some structs / traits have 2d/3d specification even if they can only exist in one of the spaces. e.g. filter_circle can't have a 3d version, rename accordingly

update README (especially filters are missing now)

write tutorial / examples withing the README or make some huge readme / example program

trait for pointcloud?

method to directly add points to pc via coordinates

try to avoid dynamic traits

also implement is_buildable_nd etc. and make is_buildable_2d also is_buildable_nd

outlier removal (filter which holds a kdtree of the reference structure, calc median / medium distance to k-nearest
neighbours remove which are further than x, furthest x percent further than x times
median / average dist...   could take either kdtree or iterator or random access
and be destructible to kdtree)

segmantation detection

remove all dependencies on PC2D / PC3D and write the methods for RandomAccessible / Iterators -> rewrite the IO methods to only require those and rename the files to the extension. e.g. IO::XYZ  IO::XY   IO::STL

either many more filters or factories for filters (same for shapes)

IO methods for PC and mesh for all general file formats

octree is missing many query methods
(also implement quad tree once these are implemented)

new filter type for directions/normals or positions & normals
